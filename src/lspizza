#!/bin/bash


# To-Do
# + change name to LSPizza
# + finish core functionalities
# + add scan functionality to check if server for x language already exists
#	+,i append to file
# + add verbosity opt
# + add parallel downloading
# + add option for printing installed lang servers
# + add oneline installer
# + add <Tab> completion



# TODO: Didn't finish --scan flag

source config.sh
source modules/utils/scanner.sh
source modules/utils/nodejs.sh
source modules/utils/system.sh
source modules/utils/text/banner.sh
source modules/utils/text/printer.sh
for ls_f in modules/lang_servers/*.sh; do source $ls_f; done


script_help=$( cat << EOF

This script simplifies facilitates the process of installing language servers.

Usages:
#0: ${this_scrpt} [flag(s)] <values(?)>
Arguments:
    -h,--help                   See this help message.
    -i,--install                Install lang severs for list of languages passed
								in a string separated by commas.
    -u,--unstall                Uninstall lang severs for list of languages passed
								in a string separated by commas.

EOF
)


if [[ -n "$1" ]]; then
	while :; do
		case $1 in
			-h|-\?|--help)
				echo "$script_help"
				exit 0
				;;
			-i|--install)       # Takes an option argument; ensure it has been specified.

				__lspizza_verbose_print "Checking for a second argument"

				if [[ "$2" ]]; then
					__lspizza_verbose_print "Parsing args"

					languages=${2//[[:blank:]]/}
					IFS=',' read -ra to_scan_array <<< "$languages"

					scan_lang_servers -i "${to_scan_array[@]}"

					shift
				else
					prompt -w "WARNING: '-i' requires a non-empty option argument."
				fi

				;;
			-u|--uninstall)

				__lspizza_verbose_print "Checking for a second argument"

				if [[ "$2" ]]; then
					__lspizza_verbose_print "Parsing args"

					languages=${2//[[:blank:]]/}
					IFS=',' read -ra to_scan_array <<< "$languages"

					scan_lang_servers -u "${to_scan_array[@]}"

					shift
				else
					prompt -w "WARNING: '-u' requires a non-empty option argument."
				fi

				;;

			-v|--verbosity)
				__lspizza_verbosity+=1
				;;
			-s|--scan)

				if [[ "$2" ]]; then
					__lspizza_verbose_print "Parsing args"

					languages=${2//[[:blank:]]/}
					IFS=',' read -ra to_scan_array <<< "$languages"

					scan_lang_servers -s "${to_scan_array[@]}"

					shift
				else
					prompt -w "WARNING: '-u' requires a non-empty option argument."
				fi

				;;
			--file=?*)
				file=${1#*=} # Delete everything up to "=" and assign the remainder.
				# echo "$file"
				;;
			--file=)         # Handle the case of an empty --file=
				# die 'ERROR: "--file" requires a non-empty option argument.'
				;;
			-?*)
				prompt -e "WARNING: Unknown option (ignored): $1"
				;;
			*)               # Default case: No more options, so break out of the loop.
				break
				;;
		esac
		shift
	done

else
    echo -e "This script needs at least one argument to work.\nType '$this_scrpt -h' or '$this_scrpt --help' for help "
fi

